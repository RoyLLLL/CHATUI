from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI
import pandas as pd

# 模拟你的新闻列表
data = [
    {'company': 'axa sa', 'index': 0, 'summary': 'Brief-BNP Paribas Sees Closing Of AXA Investment Managers Acquisition In Early July',
     'thumbdown': 'http', 'thumbup': 'http://',
     'title': '0.<a href=https://....>BRIEF-BNP Paribas Sees Closing O AXA Investment Managers Acquisition In Early July</a>.'},

    {'company': 'axa sa', 'index': 1, 'summary': 'REG-BNP Paribas SA: ACQUISITION BY BNP PARIBAS CARDIF OF AXA INVESTMENT MANAGERS - UPDATE',
     'thumbdown': 'http', 'thumbup': 'http://',
     'title': '1. <a href=https://....>REF-BNP Paribas SA: ACQUISITION BY BNP PARIBAS CARDIF OF AXA INVESTMENT MANAGERS - UPDATE</a>.'},

    {'company': 'Prudential PLC', 'index': 2, 'summary': 'REG - Prudential PLC Director/PDMR Shareholding',
     'thumbdown': 'http', 'thumbup': 'http://',
     'title': '2.<a href=https://....>BRIEF-BNP Paribas Sees Closing O AXA Investment Managers Acquisition In Early July</a>.'}
]

# 转换成 DataFrame
news_df = pd.DataFrame(data)

# 初始化 LLM
llm = OpenAI(temperature=0)

# Prompt Template
prompt_template = PromptTemplate(
    input_variables=["summary"],
    template="""
    Bonds are fixed-income securities that represent a loan made by an investor to a borrower, typically corporate or governmental.
    Coupons are the interest payments made to bondholders, usually paid semi-annually.

    Given the following news summary: {summary}

    Is this news related to bonds or coupons? Answer with 'True' if it is related, otherwise 'False'.
    """
)

# 判断每条 summary 是否与 bonds 或 coupons 相关，赋予优先级
priority = []
for summary in news_df['summary']:
    prompt = prompt_template.format(summary=summary)
    response = llm(prompt).strip()
    if response == 'True':
        priority.append("low")
    else:
        priority.append("medium")

# 添加优先级字段
news_df['priority'] = priority

# 根据优先级排序（low 会排在后面）
priority_order = {"medium": 0, "low": 1}
news_df = news_df.sort_values(by=news_df['priority'].map(priority_order)).reset_index(drop=True)

# 更新 index
news_df['index'] = news_df.index

print(news_df)
