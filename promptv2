import os
import asyncio
from langchain.chat_models import AzureChatOpenAI
from langchain.schema import HumanMessage
from langgraph import Graph, Node

# Configure Azure OpenAI settings via environment variables
azure_api_base = os.getenv("AZURE_OPENAI_API_BASE")
azure_api_key = os.getenv("AZURE_OPENAI_API_KEY")
azure_api_version = os.getenv("AZURE_OPENAI_API_VERSION", "2023-03-15-preview")
deployment_name = os.getenv("AZURE_OPENAI_DEPLOYMENT_NAME")

# Initialize LangChain AzureChatOpenAI client
chat = AzureChatOpenAI(
    deployment_name=deployment_name,
    openai_api_base=azure_api_base,
    openai_api_version=azure_api_version,
    openai_api_key=azure_api_key,
    temperature=0
)

async def is_bonds_or_coupons(text: str) -> bool:
    """
    Use AzureChatOpenAI to determine if the text is about bonds or coupons.
    Returns True if it is, False otherwise.
    """
    prompt = (
        "Determine whether the following news text is about bonds or coupons. "
        "Answer with 'yes' or 'no'.\n\n" + text
    )
    response = await chat.agenerate(
        [[HumanMessage(content=prompt)]]
    )
    answer = response.generations[0][0].text.strip().lower()
    return answer.startswith("yes")

async def is_large_transaction(text: str) -> bool:
    """
    Use AzureChatOpenAI to determine if the text describes a large financial transaction.
    Returns True if it does, False otherwise.
    """
    prompt = (
        "Determine whether the following news text describes a large financial transaction "
        "(e.g., major M&A, billion-dollar deal). Answer with 'yes' or 'no'.\n\n" + text
    )
    response = await chat.agenerate(
        [[HumanMessage(content=prompt)]]
    )
    answer = response.generations[0][0].text.strip().lower()
    return answer.startswith("yes")

# Define LangGraph nodes with async LLM-based classification
def build_graph():
    node1 = Node(
        name="Check bonds or coupons",
        func=is_bonds_or_coupons,
        outputs={True: "low", False: "to_node2"}
    )

    node2 = Node(
        name="Check large transaction",
        func=is_large_transaction,
        outputs={True: "high", False: "medium"}
    )

    return Graph(nodes=[node1, node2], start_node=node1)

async def classify_news(text: str) -> int:
    """
    Runs the LangGraph on the input text and maps the result to a numeric label:
      - 'medium' -> 1
      - 'low'    -> 2
      - 'high'   -> 0
    """
    graph = build_graph()
    result = await graph.run(text)
    mapping = {"medium": 1, "low": 2, "high": 0}
    return mapping.get(result)

# Example usage
if __name__ == "__main__":
    samples = [
        "The company issued new bonds with a 5% coupon rate.",
        "The firm closed a $1.2 billion major transaction.",
        "The company announced a mid-size asset purchase plan."
    ]

    async def main():
        for s in samples:
            score = await classify_news(s)
            print(f"{s} -> {score}")

    asyncio.run(main())
